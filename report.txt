Non-Full Case
Module 2 : module Vector_Input (A);
Size of reg "A" : 2
Number of variations : 2
Expected number of variations : 4
Number of variations is not equal to expected number of variations
=====================================
Non-Full Case
Module 8 : module UnreachableState(clk, state_out);
Size of reg "current_state" : 2
Number of variations : 3
Expected number of variations : 4
Number of variations is not equal to expected number of variations
=====================================
Non-Full Case
Module 9 : module Incomplete_Case (y_out);
Size of reg "x" : 2
Number of variations : 2
Expected number of variations : 4
Number of variations is not equal to expected number of variations
=====================================

Module Name: module UninitializedRegister(data_out);
Reg name: "data"
Possible Uninitialized reg
=====================================

Module Name: module UnreachableState(clk, state_out);
Reg name: "next_state"
Possible Uninitialized reg
=====================================

Module Name: module MultipleDrivers(input [1:0] x, output out);
Reg name: "y"
Possible Uninitialized reg
=====================================

Module Name: module CombinationalFeedbackLoop(a, b);
Reg name: "b"
Possible Uninitialized reg
=====================================
May Infer Latch in module 5, : module UnreachableBlocks(data_out); , line: 51
Reason: Signal(s) missing in the sensitivity list: state
=====================================
May Infer Latch in module 7, : module InferringLatches(enable, Data, out); , line: 71
Reason: Signal(s) missing in the sensitivity list: enable
=====================================

May Infer Latch in module 7,: module InferringLatches(enable, Data, out);, line: 75
Reason: Missing initial condition
Missing Initial Condition Line: out = Data;
=====================================
Infer Latch in module 7, : module InferringLatches(enable, Data, out);, line: 71
Reason: 'if' statement without 'else' detected
=====================================
full list

May Infer Latch in module 8,: module UnreachableState(clk, state_out);, line: 106
Reason: Missing initial condition
Missing Initial Condition Line: state_out = current_state;
=====================================
May Infer Latch in module 8,: module UnreachableState(clk, state_out);, line: 86
Reason: 'case' statement without 'default' detected
=====================================

May Infer Latch in module 8,: module UnreachableState(clk, state_out);, line: 106
Reason: Missing initial condition
Missing Initial Condition Line: state_out = current_state;
=====================================

May Infer Latch in module 9,: module Incomplete_Case (y_out);, line: 118
Reason: Missing initial condition
Missing Initial Condition Line: y_out = y;
=====================================

May Infer Latch in module 12,: module Full_Case (y_out); , line: 158
Reason: Missing initial condition
Missing Initial Condition Line: y_out = y;
=====================================

May Infer Latch in module 15, : module CombinationalFeedbackLoop(a, b);, line: 183
Reason: Combinational Feedback loop detected
=====================================

Module 13:
Always Block: ['always', 'begin', 'y = y + 1;', 'end']
Always Block: ['always', 'begin', "y = 1'b0;", 'end']
Multidriven Variables: {'y'}
=====================

Module 13:
Assign Statements: [("assign out = 0'b1;", 'out')]
Multidriven Variables: {'out'}
=====================

Possible Arithmetic Overflow in module 13 : module MultipleDrivers(input [1:0] x, output out);
Line: y = y + 1;
Left side size: 1
Right side size: 1
Operation List: [[['y'], ['y', '+', '1']]]
=====================

Possible Arithmetic Overflow in module 14 : module ArithmeticOverflow(a,b,result);
Line: assign result = a + b;
Left side size: 4
Right side size: 4
Operation List: [[['assign', 'result'], ['a', '+', 'b']]]
=====================

Possible Arithmetic Overflow in module 15 : module CombinationalFeedbackLoop(a, b);
Line: b = b + a;
Left side size: 1
Right side size: 1
Operation List: [[['b'], ['b', '+', 'a']]]
=====================

Non-Parallel Case:
Module 10 : module NonParallelZ (x);
=====================================

Non-Parallel Case:
Module 11 : module NonParallelX (x);
=====================================

Non-Parallel Case:
Module 12 : module Full_Case (y_out); 
=====================================
